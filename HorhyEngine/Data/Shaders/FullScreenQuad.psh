#include "globals.hlsl"

Texture2D<float4>	tScene	: register(t0);
Texture2D<float4>	tPos	: register(t1);
Texture2D<float4>	tColor	: register(t2);
Texture2D<float4>	tNormal	: register(t3);
Texture2DArray<float>	tCSM	: register(t4);

SamplerState sLinear : register(s0);

GLOBAL_CAMERA_UB(cameraUB);

struct PS_INPUT
{
	float4 vPosition        : SV_POSITION;
	float2 texCoord			: TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 color : SV_TARGET0;
};

PS_OUTPUT main(PS_INPUT i)
{
	PS_OUTPUT output;

	float4 scene = tScene.Sample(sLinear, i.texCoord);
	float4 pos = tPos.Sample(sLinear, i.texCoord);
	float4 color = tColor.Sample(sLinear, i.texCoord);
	float4 norm = tNormal.Sample(sLinear, i.texCoord);

	const  float3  sepiaColor = float3(1, 0.89, 0.54);
	const  float2  d1 = float2(0, 1.0 / 1000);
	const  float2  d2 = float2(1.0 / 1000, 0);
	const  float  scale = 5.1;
	
	float  c1 = dot(sepiaColor, tPos.Sample(sLinear, i.texCoord + d1).a);
	float  c2 = dot(sepiaColor, tPos.Sample(sLinear, i.texCoord - d1).a);
	float  c3 = dot(sepiaColor, tPos.Sample(sLinear, i.texCoord + d2).a);
	float  c4 = dot(sepiaColor, tPos.Sample(sLinear, i.texCoord - d2).a);

	float res = scale * (abs(c1 - c2) + abs(c2 - c3) + abs(c3 - c4));

	float depth = tCSM.Sample(sLinear, float3(i.texCoord, 0)).r;
	output.color = float4(color.rgb * scene + (res*float3(1, 0, 0)), 1.0f);
	//output.color = float4(depth /1, depth / 1, depth / 1, 1.0f);

	return output;
}